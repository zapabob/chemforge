name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * 1'  # 毎週月曜日の3:00 UTC

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # 依存関係の脆弱性スキャン
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
    
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  # コードのセキュリティスキャン
  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run bandit security scan
      run: |
        bandit -r chemforge/ -f json -o bandit-report.json
    
    - name: Run semgrep security scan
      run: |
        pip install semgrep
        semgrep --config=auto --json --output=semgrep-report.json chemforge/
    
    - name: Upload code scan results
      uses: actions/upload-artifact@v3
      with:
        name: code-scan-results
        path: |
          bandit-report.json
          semgrep-report.json

  # シークレットスキャン
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run truffleHog secret scan
      run: |
        pip install truffleHog
        trufflehog --json --output=trufflehog-report.json .
    
    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
    
    - name: Upload secret scan results
      uses: actions/upload-artifact@v3
      with:
        name: secret-scan-results
        path: |
          trufflehog-report.json
          .secrets.baseline

  # ライセンススキャン
  license-scan:
    name: License Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run license check
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output=license-report.json
    
    - name: Run fossa license scan
      run: |
        pip install fossa
        fossa analyze --output fossa-report.json
    
    - name: Upload license scan results
      uses: actions/upload-artifact@v3
      with:
        name: license-scan-results
        path: |
          license-report.json
          fossa-report.json

  # セキュリティ結果の集約
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, license-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Generate security summary
      run: |
        echo "## Security Scan Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Scan | ${{ needs.code-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Scan | ${{ needs.license-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Security Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.dependency-scan.result }}" == "success" ] && [ "${{ needs.code-scan.result }}" == "success" ] && [ "${{ needs.secret-scan.result }}" == "success" ] && [ "${{ needs.license-scan.result }}" == "success" ]; then
          echo "✅ All security scans passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some security scans failed!" >> $GITHUB_STEP_SUMMARY
        fi
