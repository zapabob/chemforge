name: Release

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '0.1.0'
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip
  TWINE_USERNAME: __token__
  TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

jobs:
  # リリース前のテスト
  pre-release-test:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install -y libxrender1 libxext6 libgl1-mesa-glx
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run all tests
      run: |
        pytest tests/ -v --cov=chemforge --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Run linting
      run: |
        flake8 chemforge/ tests/
        black --check chemforge/ tests/
        mypy chemforge/
    
    - name: Run security scan
      run: |
        bandit -r chemforge/ -f json -o bandit-report.json
        safety check --json --output safety-report.json

  # パッケージのビルド
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: pre-release-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # TestPyPIへのアップロード
  test-pypi:
    name: Upload to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload to TestPyPI
      run: |
        twine upload --repository testpypi dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}

  # PyPIへのアップロード
  pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs: [build, test-pypi]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload to PyPI
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  # ドキュメントのビルドとデプロイ
  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser
    
    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # リリースノートの生成
  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Generate release notes
      run: |
        echo "## Release Notes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Version: ${{ github.event.release.tag_name || 'Manual Release' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changes:" >> $GITHUB_STEP_SUMMARY
        echo "- Initial release of ChemForge" >> $GITHUB_STEP_SUMMARY
        echo "- Molecular design and ADMET prediction platform" >> $GITHUB_STEP_SUMMARY
        echo "- CNS drug development support" >> $GITHUB_STEP_SUMMARY
        echo "- Scaffold-based molecular generation" >> $GITHUB_STEP_SUMMARY
        echo "- Transformer-based models" >> $GITHUB_STEP_SUMMARY
        echo "- Streamlit GUI interface" >> $GITHUB_STEP_SUMMARY
        echo "- CLI tools for training and prediction" >> $GITHUB_STEP_SUMMARY
        echo "- Comprehensive test suite" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation and examples" >> $GITHUB_STEP_SUMMARY

  # 通知
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [pypi, docs, release-notes]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.pypi.result == 'success' && needs.docs.result == 'success' }}
      run: |
        echo "✅ Release completed successfully!"
        echo "Package uploaded to PyPI: https://pypi.org/project/chemforge/"
        echo "Documentation deployed: https://zapabob.github.io/chemforge/"
    
    - name: Notify failure
      if: ${{ needs.pypi.result == 'failure' || needs.docs.result == 'failure' }}
      run: |
        echo "❌ Release failed!"
        exit 1
